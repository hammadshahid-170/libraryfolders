{"version":3,"sources":["services/SPPeopleSearchService.ts"],"names":[],"mappings":"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","file":"services/SPPeopleSearchService.js","sourcesContent":["import { ISPHttpClientOptions, SPHttpClient, SPHttpClientResponse } from '@microsoft/sp-http';\nimport { Environment, EnvironmentType } from '@microsoft/sp-core-library';\nimport { PrincipalType, IPropertyFieldGroupOrPerson } from './../propertyFields/peoplePicker/IPropertyFieldPeoplePicker';\nimport { ISPPeopleSearchService } from './ISPPeopleSearchService';\nimport SPPeoplePickerMockHttpClient from './SPPeopleSearchMockService';\nimport { IWebPartContext } from '@microsoft/sp-webpart-base';\nimport { IUsers } from './IUsers';\n\n/**\n * Service implementation to search people in SharePoint\n */\nexport default class SPPeopleSearchService implements ISPPeopleSearchService {\n  /**\n   * Search people from the SharePoint People database\n   */\n  public searchPeople(ctx: IWebPartContext, query: string, principalType: PrincipalType[], siteUrl: string = null): Promise<IPropertyFieldGroupOrPerson[]> {\n    if (Environment.type === EnvironmentType.Local) {\n      // If the running environment is local, load the data from the mock\n      return this.searchPeopleFromMock(ctx, query);\n    } else {\n      // Check the type of action to perform (gobal or local)\n      if (siteUrl) {\n        let userRequestUrl = `${siteUrl}/_api/web/siteusers`;\n        // filter for principal Type\n        let filterVal: string = \"\";\n        if (principalType) {\n          filterVal = `?$filter=(${principalType.map(type => `(PrincipalType eq ${type})`).join(\" or \")})`;\n        }\n        // Filter for hidden values\n        filterVal = filterVal ? `${filterVal} and (IsHiddenInUI eq false)` : `?$filter=(IsHiddenInUI eq false)`;\n        userRequestUrl = `${userRequestUrl}${filterVal}`;\n\n        return ctx.spHttpClient.get(userRequestUrl, SPHttpClient.configurations.v1, {\n          headers: {\n            'Accept': 'application/json;odata.metadata=none'\n          }\n        })\n        .then(data => data.json())\n        .then((usersData: IUsers) => {\n          let res: IPropertyFieldGroupOrPerson[] = [];\n\n          if (usersData && usersData.value && usersData.value.length > 0) {\n            res = usersData.value.filter(element => element.Title.toLowerCase().indexOf(query.toLowerCase()) !== -1 || element.LoginName.toLowerCase().indexOf(query.toLowerCase()) !== -1).map(element => ({\n              fullName: element.Title,\n              id: element.Id.toString(),\n              login: element.LoginName,\n              email: element.Email,\n              imageUrl: this.getUserPhotoUrl(element.Email, siteUrl),\n              initials: this.getFullNameInitials(element.Title)\n            } as IPropertyFieldGroupOrPerson));\n          }\n          return res;\n        });\n      } else {\n        // If the running env is SharePoint, loads from the peoplepicker web service\n        const userRequestUrl: string = `${ctx.pageContext.web.absoluteUrl}/_api/SP.UI.ApplicationPages.ClientPeoplePickerWebServiceInterface.clientPeoplePickerSearchUser`;\n        const data = {\n          'queryParams': {\n            'AllowEmailAddresses': true,\n            'AllowMultipleEntities': false,\n            'AllUrlZones': false,\n            'MaximumEntitySuggestions': 20,\n            'PrincipalSource': 15,\n            // PrincipalType controls the type of entities that are returned in the results.\n            // Choices are All - 15, Distribution List - 2 , Security Groups - 4, SharePoint Groups - 8, User - 1.\n            // These values can be combined (example: 13 is security + SP groups + users)\n            'PrincipalType': !!principalType && principalType.length > 0 ? principalType.reduce((a, b) => a + b, 0) : 1,\n            'QueryString': query\n          }\n        };\n        let httpPostOptions: ISPHttpClientOptions = {\n          headers: {\n            'accept': 'application/json',\n            'content-type': 'application/json'\n          },\n          body: JSON.stringify(data)\n        };\n\n        // Do the call against the People REST API endpoint\n        return ctx.spHttpClient.post(userRequestUrl, SPHttpClient.configurations.v1, httpPostOptions).then((searchResponse: SPHttpClientResponse) => {\n          return searchResponse.json().then((usersResponse: any) => {\n            let res: IPropertyFieldGroupOrPerson[] = [];\n            const values: any = JSON.parse(usersResponse.value);\n            res = values.map(element => {\n              switch (element.EntityType) {\n                case 'User':\n                  const groupOrPerson: IPropertyFieldGroupOrPerson = { fullName: element.DisplayText, login: element.Description };\n                  groupOrPerson.email = element.EntityData.Email;\n                  groupOrPerson.jobTitle = element.EntityData.Title;\n                  groupOrPerson.initials = this.getFullNameInitials(groupOrPerson.fullName);\n                  groupOrPerson.imageUrl = this.getUserPhotoUrl(groupOrPerson.email, ctx.pageContext.web.absoluteUrl);\n                  return groupOrPerson;\n                case 'SecGroup':\n                  const group: IPropertyFieldGroupOrPerson = {\n                    fullName: element.DisplayText,\n                    login: element.ProviderName,\n                    id: element.Key,\n                    description: element.Description\n                  };\n                  return group;\n                case 'FormsRole':\n                  const formsRole: IPropertyFieldGroupOrPerson = {\n                    fullName: element.DisplayText,\n                    login: element.ProviderName,\n                    id: element.Key,\n                    description: element.Description\n                  };\n                  return formsRole;\n                default:\n                  const persona: IPropertyFieldGroupOrPerson = {\n                    fullName: element.DisplayText,\n                    login: element.EntityData.AccountName,\n                    id: element.EntityData.SPGroupID,\n                    description: element.Description\n                  };\n                  return persona;\n              }\n            });\n            return res;\n          });\n        });\n      }\n    }\n  }\n\n  /**\n   * Generates Initials from a full name\n   */\n  private getFullNameInitials(fullName: string): string {\n    if (fullName === null) {\n      return fullName;\n    }\n\n    const words: string[] = fullName.split(' ');\n    if (words.length === 0) {\n      return '';\n    } else if (words.length === 1) {\n      return words[0].charAt(0);\n    } else {\n      return (words[0].charAt(0) + words[1].charAt(0));\n    }\n  }\n\n  /**\n   * Gets the user photo url\n   */\n  private getUserPhotoUrl(userEmail: string, siteUrl: string): string {\n    if (userEmail) {\n      return `${siteUrl}/_layouts/15/userphoto.aspx?size=S&accountname=${userEmail}`;\n    }\n    return null;\n  }\n\n\n  /**\n   * Returns fake people results for the Mock mode\n   */\n  private searchPeopleFromMock(ctx: IWebPartContext, query: string): Promise<Array<IPropertyFieldGroupOrPerson>> {\n    return SPPeoplePickerMockHttpClient.searchPeople(ctx.pageContext.web.absoluteUrl).then(() => {\n      const results: IPropertyFieldGroupOrPerson[] = [\n        { fullName: 'Katie Jordan', initials: 'KJ', jobTitle: 'VIP Marketing', email: 'katiej@contoso.com', login: 'katiej@contoso.com' },\n        { fullName: 'Gareth Fort', initials: 'GF', jobTitle: 'Sales Lead', email: 'garethf@contoso.com', login: 'garethf@contoso.com' },\n        { fullName: 'Sara Davis', initials: 'SD', jobTitle: 'Assistant', email: 'sarad@contoso.com', login: 'sarad@contoso.com' },\n        { fullName: 'John Doe', initials: 'JD', jobTitle: 'Developer', email: 'johnd@contoso.com', login: 'johnd@contoso.com' }\n      ];\n      return results;\n    }) as Promise<Array<IPropertyFieldGroupOrPerson>>;\n  }\n}\n"],"sourceRoot":"../../src"}